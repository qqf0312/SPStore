
#include <libdevcore/Base64.h>
#include <libdevcore/Common.h>
#include <libdevcore/CommonData.h>
#include <libdevcore/FixedHash.h>
#include <libethcore/Block.h>
#include <libethcore/Exceptions.h>
#include <libnetwork/Common.h>
#include <libnetwork/Session.h>
#include <libp2p/P2PInterface.h>
#include <libp2p/P2PMessage.h>
#include <libsync/Common.h>
#include <libsync/SyncMsgPacket.h>
#include <stdlib.h>
#include <tbb/concurrent_unordered_map.h>
#include <tbb/concurrent_queue.h>
#include <unistd.h>

#include <algorithm>
#include <chrono>
#include <cmath>
#include <ctime>
#include <iostream>
#include <memory>
#include <string>

#define REQUESTBLOCKMESSAGETYPE 0
#define REQUESTCHUNKMESSAGETYPE 0
#define RESPONSEBLOCKMESSAGETYPE 1
#define RESPONSECHUNKMESSAGETYPE 1
#define BlockPoint std::shared_ptr<dev::eth::Block>
#define NodeAddr dev::h512
#define P2PManager std::shared_ptr<dev::p2p::P2PInterface>
#define MessageProtocolID dev::PROTOCOL_ID

namespace ec
{
class Eurasure;
class EurasureP2P
{
public:
    EurasureP2P(NodeAddr const& nodeid, P2PManager _service, MessageProtocolID const& _protocolId)
      : m_nodeId(nodeid), m_service(_service), m_protocolId(_protocolId)
    {
        m_groupId = dev::eth::getGroupAndProtocol(_protocolId).first;
        std::cout << "m_ecId = " << m_protocolId << std::endl;
        registerHandler();
    }
    void setEurasure(std::shared_ptr<ec::Eurasure> eurasure);
    void registerHandler();
    void removeHandler();
    ~EurasureP2P() { removeHandler(); }
    void messageHandler(dev::p2p::NetworkException _e,
        std::shared_ptr<dev::p2p::P2PSession> _session, dev::p2p::P2PMessage::Ptr _msg);
    void sendChunkMessage(uint8_t message_type, unsigned int coding_epoch, unsigned int group_id,
        unsigned int chunk_pos, std::vector<std::string> const& merklelist,
        dev::network::NodeID const& dest_node_id);
    void sendStateMessage(uint8_t message_type, unsigned int block_num, std::string const& key, std::string const& data,
        dev::network::NodeID const& dest_node_id);
    void sendProofMessage(
        unsigned int pos, std::string proofs, dev::network::NodeID const& destnodeId);
    void requestChunk(unsigned int coding_epoch, unsigned int group_id, unsigned int chunk_pos,
        NodeAddr const& destnodeId);

    void responseChunk(unsigned int coding_epoch, unsigned int group_id, unsigned int chunk_pos,
        std::vector<std::string> const& merklelist, NodeAddr const& destnodeId);
    void requestState(unsigned int block_num, std::string key, NodeAddr const& destnodeId);
    void responseState(unsigned int block_num, std::string const& key, std::string const& data, NodeAddr const& destnodeId);
    void sendProof(unsigned int pos, std::string proofs, dev::network::NodeID const& destnodeId);
    void processPacket(dev::sync::SyncMsgPacket::Ptr packet, NodeAddr const& destnodeId);
    tbb::concurrent_unordered_map<std::string, unsigned int> chunk_count_map;
    tbb::concurrent_unordered_map<std::string, std::string> chunk_data_map;
    std::map<std::string, std::string> state_map;
    tbb::concurrent_queue<std::pair<int,std::string>> vc_proof_queue;

private:
    NodeAddr m_nodeId;
    P2PManager m_service;
    MessageProtocolID m_protocolId;
    dev::GROUP_ID m_groupId;
    std::shared_ptr<ec::Eurasure> m_eurasure;
};
}  // namespace ec